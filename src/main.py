""" 
Module: GEOG5003M Programming for Geographical Information Analysis
Assignment: 2 - White Star Line
Author: Javid Yousaf
Student id: 201385963
Date: 15/05/2020
version: 1.0

Description: Main application for the White Star Line analysis.
Contains funtionality to load, process, display and export the analysis. 
"""

import elementAgent
import icebergAgent
import os
import sys
import csv
import operator
from enum import Enum
from datetime import datetime
from tkinter import Tk, Label, Button, filedialog, Menu, Frame, LabelFrame, ttk,Toplevel, font
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('TkAgg')


class WSLGui(Enum):
    '''
    Enumerator class to store GUI style properties.
    This enables changes to be made easily throughout the application.
    '''
    PAD_X = 5  # horizontal external padding.
    PAD_Y = 5  # vertical external padding.
    IPAD_X = 5  # horizontal internal padding.
    IPAD_Y = 5  # veritcal internal padding.
    DEFAULT_TEXT = "..."  # Default text when no results diplayed.


class MainApplication:
    '''
    Main application for the White Star Line analysis.
    Contains funtionality to create the GUI, load files,
    process data and display and export the analysis. 
    '''

    def __init__(self, master):
        '''
        Initialise the application by setting up and laying out the GUI elements.
        '''
        self.master = master
        master.title("White Star Line Analysis")
        master.wm_iconbitmap('assets/images/wsl.ico')
        master.geometry("1180x650+10+10")

        # disable resizing of main window
        master.resizable(width=False, height=False)

        '''
        High level variable to sore application data
        that is generated by the user
        '''
        self.lidar_data = []
        self.radar_data = []
        self.area_elements = []  # list to store the area element agents
        self.icebergs = []  # list to store the identified iceberg agents
        self.is_radar_loaded = False
        self.is_lidar_loaded = False
        self.canvas = None

        '''
        System default font settings
        '''
        default_font = font.nametofont("TkDefaultFont")
        default_font.configure(size=10)
        default_font.configure(family="Helvetica")
        '''
        Set up the top menus
        '''
        menubar = Menu(master)
        filemenu = Menu(menubar, tearoff=0)
        filemenu.add_command(label="Run Default", command=self.process_default)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=master.quit)
        filemenu.add_command(label="Restart", command=self.restart_app)

        aboutmenu = Menu(menubar, tearoff=0)
        aboutmenu.add_command(label="WSL Analysis Version 1.0")
        aboutmenu.add_command(label="Created: May 2020")
        aboutmenu.add_separator()
        aboutmenu.add_command(label="Author: Javid Yousaf")
        aboutmenu.add_command(label="Student ID: 201385963")

        menubar.add_cascade(label="File", menu=filemenu)
        menubar.add_cascade(label="About", menu=aboutmenu)
        master.config(menu=menubar)

        # Overide the default X button to quit the application gracefully
        master.protocol("WM_DELETE_WINDOW", master.quit)

        ''' 
        Main application panels to set up the frames for:
        - Application buttons and lables
        - Charts
        '''
        self.buttonPane = Frame(master)
        self.chartPane = Frame(master)

        self.buttonPane.grid(row=0, column=0, sticky="nsew")
        self.chartPane.grid(row=0, column=1, sticky="nsew")

        master.columnconfigure(0, weight=2, uniform="x")

        self.fig_analysis = plt.figure(figsize=(7, 5))

        self.canvas = matplotlib.backends.backend_tkagg.FigureCanvasTkAgg(
            self.fig_analysis, master=self.chartPane)
        self.canvas._tkcanvas.grid(row=0, column=0, padx=10, pady=10)

        self.process_frame = LabelFrame(
            self.buttonPane, text="Default Processing", width=440, height=70)
        self.process_frame.grid(row=0, column=0, ipadx=WSLGui.IPAD_X.value,
                                ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.process_frame.grid_propagate(False)

        self.load_frame = LabelFrame(self.buttonPane, text="Manual File Load", width=440, height=120)
        self.load_frame.grid(row=2, column=0, ipadx=WSLGui.IPAD_X.value,
                             ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")
        
        self.load_frame.grid_propagate(False)

        self.result_frame = LabelFrame(
            self.buttonPane, text="Iceberg Analysis", width=440, height=230)
        self.result_frame.grid(row=3, column=0, ipadx=WSLGui.IPAD_X.value,
                               ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.result_frame.grid_propagate(False)

        self.button_frame = LabelFrame(self.buttonPane, text="Controls", width=440, height=70)
        self.button_frame.grid(row=4, column=0, ipadx=WSLGui.IPAD_X.value,
                               ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.button_frame.grid_propagate(False)

        self.process_button = Button(
            self.process_frame, text="Run Process >>", command=self.process_default)
        self.process_button.grid(row=0, column=0, ipadx=WSLGui.IPAD_X.value,
                                 ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.lidar_button = Button(
            self.load_frame, text="Open Lidar file", command=self.open_lidar_file)
        self.lidar_button.grid(row=1, column=0, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value,
                               padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.radar_button = Button(
            self.load_frame, text="Open Radar file", command=self.open_radar_file)
        self.radar_button.grid(row=2, column=0, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value,
                               padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        
        # Capture default style for labels to reset to when changed.
        self.dummy_label = Label(self.master)
        self.default_bg_color = self.dummy_label.cget("bg")
        self.default_fg_color = self.dummy_label.cget("foreground")

        
        self.lidar_label = Label(
            self.load_frame, text=WSLGui.DEFAULT_TEXT.value)
        self.lidar_label.grid(row=1, column=1)

        self.radar_label = Label(
            self.load_frame, text=WSLGui.DEFAULT_TEXT.value)
        self.radar_label.grid(row=2, column=1)

        ''' 
        Results pane headings
        '''
        self.total_volume_as_label = Label(
            self.result_frame, text="Total Volume above sea level (m\u00B3)")
        self.total_volume_as_label.grid(
            row=0, column=0, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.total_mass_as_label = Label(
            self.result_frame, text="Total Mass above sea level (kg)")
        self.total_mass_as_label.grid(
            row=1, column=0, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.total_volume_label = Label(
            self.result_frame, text="Total Volume of iceberg (m\u00B3)")
        self.total_volume_label.grid(row=2, column=0, ipadx=WSLGui.IPAD_X.value,
                                     ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.total_mass_as_label = Label(
            self.result_frame, text="Total Mass of iceberg (kg)")
        self.total_mass_as_label.grid(
            row=3, column=0, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.tow_decision_label = Label(self.result_frame, text="Result")
        self.tow_decision_label.grid(row=4, column=0, ipadx=WSLGui.IPAD_X.value,
                                     ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        ''' 
        Results pane headings values
        '''
        self.total_volume_as_result_label = Label(
            self.result_frame, text=WSLGui.DEFAULT_TEXT.value)
        self.total_volume_as_result_label.grid(
            row=0, column=1, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.total_mass_as_result_label = Label(
            self.result_frame, text=WSLGui.DEFAULT_TEXT.value)
        self.total_mass_as_result_label.grid(
            row=1, column=1, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.total_volume_result_label = Label(
            self.result_frame, text=WSLGui.DEFAULT_TEXT.value)
        self.total_volume_result_label.grid(
            row=2, column=1, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.total_mass_result_label = Label(
            self.result_frame, text=WSLGui.DEFAULT_TEXT.value)
        self.total_mass_result_label.grid(
            row=3, column=1, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        self.tow_decision_result_label = Label(
            self.result_frame, text=WSLGui.DEFAULT_TEXT.value)
        self.tow_decision_result_label.grid(
            row=4, column=1, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        ''' 
        Control button panel
        '''
        export_button = Button(
            self.button_frame, text='Export to file', command=self.export_analysis_file)
        export_button.grid(row=0, column=0, ipadx=WSLGui.IPAD_X.value,
                           ipady=WSLGui.IPAD_Y.value, padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        clear_button = Button(
            self.button_frame, text='Clear Data', command=self.clear_app_data)
        clear_button.grid(row=0, column=1, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value,
                          padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

        exit_button = Button(
            self.button_frame, text='Exit', command=master.quit)
        exit_button.grid(row=0, column=2, ipadx=WSLGui.IPAD_X.value, ipady=WSLGui.IPAD_Y.value,
                         padx=WSLGui.PAD_X.value, pady=WSLGui.PAD_Y.value, sticky="W")

    def process_default(self):
        '''
        Read and process the default lidar and radar files for a single iceberg.
        '''
        self.clear_app_data()  # clear app data
        self.process_lidar_file("assets/single.lidar")
        self.process_radar_file("assets/single.radar")

    # Open a lidar file dialog box for user selection of file - file is restriced to .lidar types
    def open_lidar_file(self):
        '''
        - Opens a file dialog box for the user to select a LIDAR file.
        - The file is restriced to .lidar type.
        - Initiates the processing of data once the file is selected.
        '''
        lidar_filename = filedialog.askopenfilename(
            initialdir="/", title="Open Lidar File", filetypes=[("lidar files", ".lidar")])
        self.process_lidar_file(lidar_filename)

    # Open a radar file dialog box for user selection of file - file is restriced to .radar types
    def open_radar_file(self):
        '''
        - Opens a file dialog box for the user to select a RADAR file.
        - The file is restriced to .ra type.
        - Initiates the processing of data once the file is selected.
        '''
        radar_filename = filedialog.askopenfilename(
            initialdir="/", title="Open Radar File", filetypes=[("radar files", "*.radar")])
        self.process_radar_file(radar_filename)

    def process_lidar_file(self, lidar_filepath):
        '''
        Processes the LIDAR file from the provided file path in the following way:
        - Opens the file and copies the data in to a 2d list.
        - Displays the extracted data on a graph.
        - Extracts the file name from the path and displays it in the interface.
        - Plots the data
        '''
        if not lidar_filepath:
            return
        try:
            with open(lidar_filepath, 'r') as f:
                reader = csv.reader(f, quoting=csv.QUOTE_NONNUMERIC)
                for row in reader:
                    rowlist = []
                    for value in row:
                        rowlist.append(int(value))
                    self.lidar_data.append(rowlist)
                self.is_lidar_loaded = True
                self.lidar_label['text'] = os.path.basename(lidar_filepath)
                self.plot_data()
        except Exception as e:
            print('Unable to open file: %r' % lidar_filepath, e)

    # Process the radar file

    def process_radar_file(self, radar_filepath):
        '''
        Processes the RADAR file from the provided file path in the following way:
        - Opens the file and copies the data in to a 2d list.
        - Displays the extracted data on a graph.
        - Sends the data for analyis.
        - Extracts the file name from the path and displays it in the interface.
        - Plots the data
        '''
        if not radar_filepath:
            return
        try:
            with open(radar_filepath, 'r') as f:
                reader = csv.reader(f, quoting=csv.QUOTE_NONNUMERIC)
                for row in reader:
                    rowlist = []
                    for value in row:
                        rowlist.append(int(value))
                    self.radar_data.append(rowlist)
                self.is_radar_loaded = True
                self.process_data()
                self.radar_label['text'] = os.path.basename(radar_filepath)
                self.plot_data()
        except Exception as e:
            print('Unable to open file: %r' % radar_filepath, e)

    def process_data(self):
        '''
        Process the lidar and radar data elemenmt by element to:
        - calculate total mass above sea level.
        - calculate total volume above sea level.
        - Create iceberg agent and display information in GUI.
        '''

        # check if radar and lidar data have the same size grids:
        radar_row_count = len(self.radar_data)
        radar_column_count = len(self.radar_data[0])
        lidar_row_count = len(self.lidar_data)
        lidar_column_count = len(self.lidar_data[0])

        if (radar_row_count == lidar_row_count & radar_column_count == lidar_column_count):
            rows = radar_row_count
            columns = radar_column_count
            # populate berg data list with agents to capture lidar and radar information at each x,y location
            for i in range(rows):
                for j in range(columns):
                    radar_value = self.radar_data[i][j]
                    lidar_value = self.lidar_data[i][j]
                    self.area_elements.append(
                        elementAgent.AreaElement(j, i, radar_value, lidar_value))

            # Iterate throught berg agent and generate iceberg data
            total_volume_as = 0  # Used to store total volume above sea level
            total_mass_as = 0  # Used to store total mass above sea level

            for i in range(len(self.area_elements)):
                if(self.area_elements[i].is_ice()):
                    element_height_as = (
                        self.area_elements[i].calculate_height_as())
                    '''
                    As each element is 1m x 1m the volume of ice above sea level will be:
                    1 x 1 x "element_height_as" which is just "element_height_as"
                    but we calculate and assign a variable for clarity:
                    '''
                    element_volume_as = 1 * 1 * element_height_as
                    total_volume_as += element_volume_as  # add the element volume to the total

                    # Density of ice is approx 900 Kg/m3 therefore mass is 900 x volume:
                    element_mass_as = 900 * element_volume_as
                    total_mass_as += element_mass_as

            # Create an iceberg agent from the data.
            self.icebergs.append(icebergAgent.Iceberg(
                total_volume_as, total_mass_as))
            self.display_iceberg_analysis()

    def display_iceberg_analysis(self):
        '''
        Display iceberg data.
        Iterate through the list of stored icebergs and get relevant data.
        Numbers are formatted and rounded appropriately.
        '''
        for i in range(len(self.icebergs)):
            self.total_volume_as_result_label['text'] = "{:,}".format(
                round(self.icebergs[i].get_volume_as())) + " m\u00B3"
            self.total_mass_as_result_label['text'] = "{:,}".format(
                round(self.icebergs[i].get_mass_as())) + " Kg"
            self.total_volume_result_label['text'] = "{:,}".format(
                round(self.icebergs[i].get_total_volume())) + " m\u00B3"
            self.total_mass_result_label['text'] = "{:,}".format(
                round(self.icebergs[i].get_total_mass())) + " Kg"

            if (self.icebergs[i].is_towable()):
                self.tow_decision_result_label['text'] = "Iceberg CAN be towed"
                self.tow_decision_result_label['bg'] = "green"
                self.tow_decision_result_label['foreground'] = "white"
            else:
                self.tow_decision_result_label['text'] = "Iceberg is NOT towable"
                self.tow_decision_result_label['bg'] = "red"
                self.tow_decision_result_label['foreground'] = "white"

    def export_analysis_file(self):
        '''
        Export iceberg analysis data to a text file - 
        this will display a file dialog and allow the user the enter 
        a file name and choose a location to save the file.
        '''
        date_time_obj = datetime.now()
        time_stamp = date_time_obj.strftime("%d/%m/%Y, %H:%M:%S")

        f = filedialog.asksaveasfile(mode='w', defaultextension=".txt")
        if f is None:
            return
        f.write("Iceberg Analysis\n\n")
        for i in range(len(self.icebergs)):
            f.write("Total mass above sea level: " +
                    str(self.icebergs[i].get_mass_as()) + " kg\n")
            f.write("Total volume above sea level: " +
                    str(self.icebergs[i].get_volume_as()) + " m3\n")
            f.write("Total mass: " +
                    str(self.icebergs[i].get_total_mass()) + " kg\n")
            f.write("Total volume: " +
                    str(self.icebergs[i].get_total_volume()) + " m3\n")
            if (self.icebergs[i].is_towable()):
                f.write("This iceberg CAN be towed.\n")
            else:
                f.write("This iceberg is NOT towable.\n")
        f.write("\n")
        f.write("Created: " + time_stamp)
        f.close()

    def clear_app_data(self):
        '''
        Reset the application by:
        - Clearing all populated data.
        - Changing GUI labels back to default.
        - Clearing the displayed charts.
        '''
        self.lidar_data = []
        self.radar_data = []
        self.area_elements = []
        self.icebergs = []
        self.is_radar_loaded = False
        self.is_lidar_loaded = False
        self.total_volume_as_result_label['text'] = WSLGui.DEFAULT_TEXT.value
        self.total_mass_as_result_label['text'] = WSLGui.DEFAULT_TEXT.value
        self.total_volume_result_label['text'] = WSLGui.DEFAULT_TEXT.value
        self.total_mass_result_label['text'] = WSLGui.DEFAULT_TEXT.value
        self.lidar_label['text'] = WSLGui.DEFAULT_TEXT.value
        self.radar_label['text'] = WSLGui.DEFAULT_TEXT.value
        self.tow_decision_result_label['text'] = WSLGui.DEFAULT_TEXT.value
        self.tow_decision_result_label['bg'] = self.default_bg_color
        self.tow_decision_result_label['foreground'] = self.default_fg_color

        self.fig_analysis = plt.figure(figsize=(7, 5))
        self.canvas._tkcanvas.destroy()
        self.canvas = None
        self.canvas = matplotlib.backends.backend_tkagg.FigureCanvasTkAgg(
            self.fig_analysis, master=self.chartPane)
        self.canvas._tkcanvas.grid(row=0, column=0, padx=10, pady=10)

    def restart_app(self):
        """
        Restarts the application.
        Note: this function does not save any data already generated.
        Analysis data can be exported before calling this function.
        """
        os.execl(sys.executable, os.path.abspath(__file__), *sys.argv)

    def plot_data(self):
        '''
        Draws the plot of the lidar and radar data.
        - Sets the subplots for both sets of data.
        - Displays the data in the canvas.
        '''
        if (self.is_radar_loaded & self.is_lidar_loaded):
            plt.xlim(0, 299)
            plt.ylim(0, 299)

            # Create radar subplot
            plt.subplot(2, 2, 1)
            plt.title("Radar Data")
            plt.imshow(self.radar_data, cmap='Purples',
                       vmin=0, vmax=255, alpha=1)
            plt.colorbar()

            # Create lidar subplot
            plt.subplot(2, 2, 2)
            plt.title("Lidar Data")
            plt.imshow(self.lidar_data, cmap='Greens',
                       vmin=0, vmax=255, alpha=1)
            plt.colorbar()

            self.canvas.draw()


'''
Sets the root of the application as the main TKinter widget.
Executes the application class in an infinate loop.
'''
root = Tk()
my_app = MainApplication(root)
root.mainloop()
